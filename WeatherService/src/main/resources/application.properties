spring.application.name=weather-service
server.port=0

#OPENWEATHERMAP CONFIG
openweathermap.api.key=c8234ae4c35766b7da12adede42b8901
openweathermap.api.units=metric

#KAFKA CONFIG
spring.kafka.producer.bootstrap-servers=http://localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages= *
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

#DB CONFIG
spring.datasource.username=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/weather-db
spring.datasource.password=sakarya5454
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.javax.persistence.validation.mode = none
spring.jpa.hibernate.ddl-auto=update

#SECURITY
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
application.security.jwt.expiration=86400000 
application.security.jwt.refresh-token.expiration=604800000

#EUREKA
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone= http://localhost:8761/eureka
eureka.instance.instance-id= ${spring.application.name}:${instanceId:${random.value}}
eureka.instance.prefer-ip-address= true

#ZIPKIN
management.endpoints.web.exposure.include=*
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint= http://localhost:9411/api/v2/spans